---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from a GDD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Game Design Document (GDD). The task list should guide a developer through implementation.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[gdd-file-name].md` (e.g., `tasks-gdd-upgrade-system.md`)

## Process

1.  **Receive GDD Reference:** The user points the AI to a specific GDD file
2.  **Analyze GDD:** The AI reads and analyzes the game mechanics, player journey, and other sections of the specified GDD.
3.  **Phase 1: Generate Parent Tasks:** Based on the GDD analysis, create the file and generate the main, high-level tasks required to implement the game feature/system. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the GDD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the GDD.
6.  **Identify Relevant Files:** Based on the tasks and GDD, identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files if applicable.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[gdd-file-name].md`, where `[gdd-file-name]` matches the base name of the input GDD file (e.g., if the input was `gdd-upgrade-system.md`, the output is `tasks-gdd-upgrade-system.md`).

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `Scripts/GameSystems/FeatureManager.cs` - Brief description of why this file is relevant (e.g., Main controller for this game system).
- `Scripts/UI/FeatureUI.cs` - Brief description (e.g., UI controller for player interactions).
- `Scripts/Data/FeatureData.cs` - Brief description (e.g., Data structures and configuration).
- `Prefabs/UI/FeaturePanel.prefab` - Brief description (e.g., UI prefab for the feature interface).
- `ScriptableObjects/FeatureConfig.asset` - Brief description (e.g., Configuration asset for balance values).
- `Audio/SFX/FeatureSounds.wav` - Brief description (e.g., Sound effects for player feedback).
- `Tests/FeatureManagerTests.cs` - Unit tests for FeatureManager.cs.
- `Tests/PlayMode/FeatureIntegrationTests.cs` - Integration tests for feature behavior.

### Notes

- Unit tests should typically be placed in a `Tests/` directory structure that mirrors the main code organization.
- Use Unity Test Runner for both Edit Mode and Play Mode tests.
- Consider playtesting protocols for balance and player experience validation.
- Asset files (prefabs, ScriptableObjects, audio) should follow project naming conventions.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
